// <auto-generated />
using System;
using Csw.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Csw.Infrastructure.Migrations
{
    [DbContext(typeof(CentralDbContext))]
    [Migration("20240816074357_CreateTableEpnSyncLog")]
    partial class CreateTableEpnSyncLog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Csw.Domain.Entities.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssociationId")
                        .HasColumnType("int")
                        .HasColumnName("association_id");

                    b.Property<bool?>("BatchPrint")
                        .HasColumnType("bit")
                        .HasColumnName("batch_print");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<bool>("Breeding")
                        .HasColumnType("bit")
                        .HasColumnName("breeding");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("date_update");

                    b.Property<bool>("Deceased")
                        .HasColumnType("bit")
                        .HasColumnName("deceased");

                    b.Property<string>("DistinguishingMarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("distinguishing_marks");

                    b.Property<bool>("Exported")
                        .HasColumnType("bit")
                        .HasColumnName("exported");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<int>("LastOrganisationId")
                        .HasColumnType("int")
                        .HasColumnName("last_organisation_id");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("int")
                        .HasColumnName("last_user_id");

                    b.Property<bool>("Lost")
                        .HasColumnType("bit")
                        .HasColumnName("lost");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("name");

                    b.Property<int?>("OldIntroductionNumber")
                        .HasColumnType("int")
                        .HasColumnName("old_introduction_number");

                    b.Property<int?>("OldIntroductionNumberOwner")
                        .HasColumnType("int")
                        .HasColumnName("old_introduction_number_owner");

                    b.Property<short?>("OldStationNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("old_station_number");

                    b.Property<short?>("OldStationNumberOwner")
                        .HasColumnType("smallint")
                        .HasColumnName("old_station_number_owner");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit")
                        .HasColumnName("pending");

                    b.Property<string>("Species")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("species");

                    b.Property<bool>("Sterilized")
                        .HasColumnType("bit")
                        .HasColumnName("sterilized");

                    b.Property<bool>("Stolen")
                        .HasColumnType("bit")
                        .HasColumnName("stolen");

                    b.Property<bool>("Temporary")
                        .HasColumnType("bit")
                        .HasColumnName("temporary");

                    b.Property<bool>("ToPrint")
                        .HasColumnType("bit")
                        .HasColumnName("to_print");

                    b.Property<bool>("Unknown")
                        .HasColumnType("bit")
                        .HasColumnName("unknown");

                    b.Property<bool>("Validated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("validated");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83FEBBD8F8B");

                    b.HasIndex(new[] { "AssociationId" }, "IDX_animal_association_id");

                    b.HasIndex(new[] { "LastOrganisationId" }, "IDX_animal_last_organisation_id");

                    b.HasIndex(new[] { "LastUserId" }, "IDX_animal_last_user_id");

                    b.HasIndex(new[] { "OwnerId" }, "IDX_animal_owner_id");

                    b.ToTable("animal", null, t =>
                        {
                            t.HasTrigger("tg_animal_audit");

                            t.HasTrigger("tg_animal_cascade_delete");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalActionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("animal_action_type_id");

                    b.Property<int>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("ntext")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnName("effective_date");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("int")
                        .HasColumnName("last_user_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__animal_a__3213E83F2CC2A6D7");

                    b.HasIndex(new[] { "AnimalActionTypeId" }, "IDX_animal_action_animal_action_type_id");

                    b.HasIndex(new[] { "AnimalId" }, "IDX_animal_action_animal_id");

                    b.HasIndex(new[] { "LastUserId" }, "IDX_animal_action_last_user_id");

                    b.HasIndex(new[] { "UserId" }, "IDX_animal_action_user_id");

                    b.ToTable("animal_action", null, t =>
                        {
                            t.HasTrigger("tg_animal_action_audit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("StatusLink")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status_link");

                    b.Property<bool>("StatusState")
                        .HasColumnType("bit")
                        .HasColumnName("status_state");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83FE1EF01F0");

                    b.ToTable("animal_action_type", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalBreed", b =>
                {
                    b.Property<int>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("value");

                    b.Property<byte>("Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)127)
                        .HasColumnName("pos");

                    b.HasKey("AnimalId", "Value")
                        .HasName("PK__animal_b__7A63B131FA6EDA22");

                    b.HasIndex(new[] { "AnimalId" }, "IDX_animal_breed_animal_id");

                    b.ToTable("animal_breed", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalCoat", b =>
                {
                    b.Property<int>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("value");

                    b.Property<byte>("Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)127)
                        .HasColumnName("pos");

                    b.HasKey("AnimalId", "Value")
                        .HasName("PK__animal_c__7A63B1312904828E");

                    b.HasIndex(new[] { "AnimalId" }, "IDX_animal_coat_animal_id");

                    b.ToTable("animal_coat", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalColor", b =>
                {
                    b.Property<int>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("value");

                    b.Property<byte>("Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)127)
                        .HasColumnName("pos");

                    b.HasKey("AnimalId", "Value")
                        .HasName("PK__animal_c__7A63B1318D393AEC");

                    b.HasIndex(new[] { "AnimalId" }, "IDX_animal_color_animal_id");

                    b.ToTable("animal_color", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalFinalCertificatePrintLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<int>("BatchNumber")
                        .HasColumnType("int")
                        .HasColumnName("batch_number");

                    b.Property<int?>("MicrochipIdentificationId")
                        .HasColumnType("int")
                        .HasColumnName("microchip_identification_id");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int")
                        .HasColumnName("organisation_id");

                    b.Property<int?>("PassportId")
                        .HasColumnType("int")
                        .HasColumnName("passport_id");

                    b.Property<DateTime>("PrintDate")
                        .HasColumnType("datetime")
                        .HasColumnName("print_date");

                    b.Property<string>("PrintType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("print_type");

                    b.Property<string>("SerializedAnimal")
                        .HasColumnType("ntext")
                        .HasColumnName("serialized_animal");

                    b.Property<int?>("TattooIdentificationId")
                        .HasColumnType("int")
                        .HasColumnName("tattoo_identification_id");

                    b.HasKey("Id")
                        .HasName("PK__animal_f__3213E83F259DE1AB");

                    b.HasIndex(new[] { "AnimalId" }, "IDX_animal_final_certificate_print_log_animal_id");

                    b.HasIndex(new[] { "OrganisationId" }, "IDX_animal_final_certificate_print_log_organisation_id");

                    b.ToTable("animal_final_certificate_print_log", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalOrganisationAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int")
                        .HasColumnName("organisation_id");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83FE3E06E36");

                    b.HasIndex(new[] { "AnimalId" }, "IDX_animal_organisation_association_animal_id");

                    b.HasIndex(new[] { "OrganisationId" }, "IDX_animal_organisation_association_organisation_id");

                    b.ToTable("animal_organisation_association", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalOwnerLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("int")
                        .HasColumnName("last_user_id");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83FAAC91FB4");

                    b.HasIndex(new[] { "AnimalId" }, "IDX_animal_owner_log_animal_id");

                    b.HasIndex(new[] { "LastUserId" }, "IDX_animal_owner_log_last_user_id");

                    b.HasIndex(new[] { "OwnerId" }, "IDX_animal_owner_log_owner_id");

                    b.HasIndex(new[] { "UserId" }, "IDX_animal_owner_log_user_id");

                    b.ToTable("animal_owner_log", null, t =>
                        {
                            t.HasTrigger("tg_animal_owner_log_audit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Csw.Domain.Entities.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.Association", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("date_update");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("fax");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("number");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83F51AAF032");

                    b.HasIndex(new[] { "CountryCode" }, "IDX_association_country_code");

                    b.ToTable("association", null, t =>
                        {
                            t.HasTrigger("tg_association_cascade_delete");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Csw.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Code")
                        .HasName("PK__tmp_ms_x__357D4CF8FCAFDAEA");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.EmailCampaign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CampaignDate")
                        .HasColumnType("datetime")
                        .HasColumnName("campaign_date");

                    b.Property<string>("CampaignName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("campaign_name");

                    b.Property<DateTime?>("ClickedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("clicked_date");

                    b.Property<string>("EmailBody")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_body");

                    b.Property<int?>("IdentifierId")
                        .HasColumnType("int")
                        .HasColumnName("identifier_id");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasDefaultValue("en")
                        .HasColumnName("language");

                    b.Property<int?>("LastOrganisationId")
                        .HasColumnType("int")
                        .HasColumnName("last_organisation_id");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("recipient_email");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("recipient_type");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("sent_date");

                    b.Property<bool>("ToSend")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("to_send");

                    b.Property<DateTime?>("UnsubscribedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("unsubscribed_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RecipientEmail" }, "idx_email_campaign_recipient_email");

                    b.ToTable("email_campaign", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.EmailCampaignUniqueId", b =>
                {
                    b.Property<long?>("Maxid")
                        .HasColumnType("bigint")
                        .HasColumnName("maxid");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("recipient_email");

                    b.ToTable("email_campaign_unique_id", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.EpnSyncLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorCodeList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("error_code_list");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("identification_number");

                    b.Property<bool>("IsMissing")
                        .HasColumnType("bit")
                        .HasColumnName("is_missing");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit")
                        .HasColumnName("is_success");

                    b.Property<DateTime>("ProcessingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("processing_date");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transaction_type");

                    b.HasKey("Id")
                        .HasName("PK_EpnSyncLog");

                    b.ToTable("epn_sync_log", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.Identification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("ntext")
                        .HasColumnName("comment");

                    b.Property<DateOnly?>("DateIdentification")
                        .HasColumnType("date")
                        .HasColumnName("date_identification");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("date_update");

                    b.Property<DateTime?>("EpnDateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("epn_date_insert");

                    b.Property<DateTime?>("EpnDateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("epn_date_update");

                    b.Property<int>("IdentificationLocalisationId")
                        .HasColumnType("int")
                        .HasColumnName("identification_localisation_id");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("identification_number");

                    b.Property<int>("IdentificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("identification_type_id");

                    b.Property<int>("IdentifierId")
                        .HasColumnType("int")
                        .HasColumnName("identifier_id");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("int")
                        .HasColumnName("last_user_id");

                    b.Property<int?>("OldIntroductionNumberAnimal")
                        .HasColumnType("int")
                        .HasColumnName("old_introduction_number_animal");

                    b.Property<int?>("OldIntroductionNumberIdentifier")
                        .HasColumnType("int")
                        .HasColumnName("old_introduction_number_identifier");

                    b.Property<short?>("OldStationNumberAnimal")
                        .HasColumnType("smallint")
                        .HasColumnName("old_station_number_animal");

                    b.Property<short?>("OldStationNumberIdentifier")
                        .HasColumnType("smallint")
                        .HasColumnName("old_station_number_identifier");

                    b.Property<bool>("Validated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("validated");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83FFC377581");

                    b.HasIndex(new[] { "EpnDateInsert" }, "IDX_epn_date_insert");

                    b.HasIndex(new[] { "EpnDateUpdate" }, "IDX_epn_date_update");

                    b.HasIndex(new[] { "AnimalId" }, "IDX_identification_animal_id");

                    b.HasIndex(new[] { "IdentificationLocalisationId" }, "IDX_identification_identification_localisation_id");

                    b.HasIndex(new[] { "IdentificationTypeId" }, "IDX_identification_identification_type_id");

                    b.HasIndex(new[] { "IdentifierId" }, "IDX_identification_identifier_id");

                    b.HasIndex(new[] { "LastUserId" }, "IDX_identification_last_user_id");

                    b.HasIndex(new[] { "AppUserId" }, "IX_identification_AppUserId");

                    b.HasIndex(new[] { "IdentificationNumber" }, "UQ__identifi__224D5913FD20C123")
                        .IsUnique();

                    b.ToTable("identification", null, t =>
                        {
                            t.HasTrigger("tg_identification_audit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Csw.Domain.Entities.IdentificationLocalisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Localisation")
                        .IsRequired()
                        .HasColumnType("ntext")
                        .HasColumnName("localisation");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83F98D1E1B4");

                    b.ToTable("identification_localisation", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.IdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83FAFFAD850");

                    b.HasIndex(new[] { "Type" }, "UQ__identifi__E3F85248A9E68F7A")
                        .IsUnique();

                    b.ToTable("identification_type", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.Identifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AspNetUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Authenticated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("authenticated");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("date_update");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("fax");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("firstname");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("language_code");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("int")
                        .HasColumnName("last_user_id");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("lastname");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("mobile");

                    b.Property<bool>("NoMailing")
                        .HasColumnType("bit")
                        .HasColumnName("no_mailing");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("number");

                    b.Property<int?>("OldIntroductionNumber")
                        .HasColumnType("int")
                        .HasColumnName("old_introduction_number");

                    b.Property<short?>("OldStationNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("old_station_number");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("street");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("")
                        .HasColumnName("vat_number");

                    b.Property<string>("VeterinaryNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("veterinary_number");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83FA2022F29");

                    b.HasIndex(new[] { "CountryCode" }, "IDX_identifier_country_code");

                    b.HasIndex(new[] { "LanguageCode" }, "IDX_identifier_language_code");

                    b.HasIndex(new[] { "LastUserId" }, "IDX_identifier_last_user_id");

                    b.HasIndex(new[] { "UserId" }, "IDX_identifier_user_id");

                    b.ToTable("identifier", null, t =>
                        {
                            t.HasTrigger("tg_identifier_audit");

                            t.HasTrigger("tg_identifier_cascade_delete");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Csw.Domain.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("code");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int")
                        .HasColumnName("index_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Code")
                        .HasName("PK__tmp_ms_x__357D4CF81F9683EB");

                    b.ToTable("language", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.MailjetStatus", b =>
                {
                    b.Property<string>("To")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("To")
                        .HasName("PK_mailjet_status_1");

                    b.ToTable("mailjet_status", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.MailjetTemp", b =>
                {
                    b.Property<bool>("Blocked")
                        .HasColumnType("bit")
                        .HasColumnName("blocked");

                    b.Property<bool>("Bounce")
                        .HasColumnType("bit")
                        .HasColumnName("bounce");

                    b.Property<bool>("Click")
                        .HasColumnType("bit")
                        .HasColumnName("click");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("Details")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("details");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Messageid")
                        .HasColumnType("float")
                        .HasColumnName("messageid");

                    b.Property<bool>("Open")
                        .HasColumnType("bit")
                        .HasColumnName("open");

                    b.Property<bool>("Queued")
                        .HasColumnType("bit")
                        .HasColumnName("queued");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit")
                        .HasColumnName("sent");

                    b.Property<bool>("Spam")
                        .HasColumnType("bit")
                        .HasColumnName("spam");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("subject");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Unsub")
                        .HasColumnType("bit")
                        .HasColumnName("unsub");

                    b.ToTable("mailjet_temp", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("code")
                        .IsFixedLength();

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("color");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("date_update");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("fax");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("number");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83F046E2E70");

                    b.HasIndex(new[] { "CountryCode" }, "IDX_organisation_country_code");

                    b.HasIndex(new[] { "Code" }, "UQ__tmp_ms_x__357D4CF9AC7CF894")
                        .IsUnique();

                    b.ToTable("organisation", null, t =>
                        {
                            t.HasTrigger("tg_organisation_cascade_delete");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Csw.Domain.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgreementNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("agreement_number");

                    b.Property<int?>("AspNetUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Authenticated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("authenticated");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<bool>("Confidential")
                        .HasColumnType("bit")
                        .HasColumnName("confidential");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("date_update");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("firstname");

                    b.Property<bool>("ImmediateTransferPrivilege")
                        .HasColumnType("bit")
                        .HasColumnName("immediate_transfer_privilege");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("language_code");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("int")
                        .HasColumnName("last_user_id");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("lastname");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("number");

                    b.Property<int?>("OldIntroductionNumber")
                        .HasColumnType("int")
                        .HasColumnName("old_introduction_number");

                    b.Property<short?>("OldStationNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("old_station_number");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("phone1");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("phone2");

                    b.Property<string>("Phone3")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("phone3");

                    b.Property<string>("Phone4")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("phone4");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("street");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83FAA2E603E");

                    b.HasIndex(new[] { "LanguageCode" }, "IDX_iowner_language_code");

                    b.HasIndex(new[] { "CountryCode" }, "IDX_owner_country_code");

                    b.HasIndex(new[] { "LastUserId" }, "IDX_owner_last_user_id");

                    b.HasIndex(new[] { "UserId" }, "IDX_owner_user_id");

                    b.HasIndex(new[] { "AgreementNumber" }, "_dta_index_owner_8_2037582297__K20");

                    b.HasIndex(new[] { "Lastname", "City", "Firstname", "PostalCode", "Street" }, "nci_wi_owner_D401A5FCAC5D0E15AB1A");

                    b.ToTable("owner", null, t =>
                        {
                            t.HasTrigger("tg_owner_audit");

                            t.HasTrigger("tg_owner_cascade_delete");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Csw.Domain.Entities.OwnerAddressLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("int")
                        .HasColumnName("last_user_id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("number");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83F63E71BD9");

                    b.HasIndex(new[] { "CountryCode" }, "IDX_owner_address_log_country_code");

                    b.HasIndex(new[] { "LastUserId" }, "IDX_owner_address_log_last_user_id");

                    b.HasIndex(new[] { "OwnerId" }, "IDX_owner_address_log_owner_id");

                    b.ToTable("owner_address_log", null, t =>
                        {
                            t.HasTrigger("tg_owner_address_log_audit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Csw.Domain.Entities.Passport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("int")
                        .HasColumnName("last_user_id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83FED0ED256");

                    b.HasIndex(new[] { "AnimalId" }, "IDX_passport_animal_id");

                    b.HasIndex(new[] { "LastUserId" }, "IDX_passport_last_user_id");

                    b.HasIndex(new[] { "Number" }, "UQ__passport__FD291E41B3DE7D58")
                        .IsUnique();

                    b.ToTable("passport", null, t =>
                        {
                            t.HasTrigger("tg_passport_audit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Csw.Domain.Entities.PostalAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("country_code");

                    b.Property<string>("MainPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("main_postal_code");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83F98DD9847");

                    b.HasIndex(new[] { "CountryCode", "PostalCode", "City", "Street" }, "UQ__tmp_ms_x__3E2DE410DF7D150E")
                        .IsUnique();

                    b.HasIndex(new[] { "CountryCode", "City", "PostalCode" }, "_dta_index_postal_address_8_114099447__K2_K4_K3");

                    b.HasIndex(new[] { "PostalCode", "City", "CountryCode" }, "_dta_index_postal_address_8_114099447__K3_K4_K2");

                    b.HasIndex(new[] { "City" }, "_dta_index_postal_address_8_114099447__K4");

                    b.HasIndex(new[] { "City", "CountryCode", "PostalCode", "Street" }, "_dta_index_postal_address_8_114099447__K4_K2_K3_K5");

                    b.HasIndex(new[] { "City", "PostalCode", "CountryCode" }, "_dta_index_postal_address_8_114099447__K4_K3_K2");

                    b.HasIndex(new[] { "Street", "City", "CountryCode", "PostalCode" }, "_dta_index_postal_address_8_114099447__K5_K4_K2_K3");

                    b.ToTable("postal_address", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.PostalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("country_code");

                    b.Property<string>("MainCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("main_city");

                    b.Property<string>("MainPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("main_postal_code");

                    b.Property<string>("PostalCode1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("province");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("region");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83F62DFCEE0");

                    b.HasIndex(new[] { "CountryCode" }, "IDX_postal_code_country_code");

                    b.ToTable("postal_code", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.RefAnimalColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__ref_anim__3213E83F85F1BD71");

                    b.HasIndex(new[] { "Language", "Name" }, "UQ__ref_anim__5883B728121C2D80")
                        .IsUnique()
                        .HasFilter("[language] IS NOT NULL");

                    b.ToTable("ref_animal_color", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.RefBreedName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int")
                        .HasColumnName("species_id");

                    b.HasKey("Id")
                        .HasName("PK__ref_bree__3213E83F6128AF4B");

                    b.HasIndex(new[] { "SpeciesId" }, "IDX_ref_breed_name_species_id");

                    b.HasIndex(new[] { "Language", "SpeciesId", "Name" }, "UQ__ref_bree__CFFC98AA8B0FA35A")
                        .IsUnique()
                        .HasFilter("[language] IS NOT NULL");

                    b.HasIndex(new[] { "Name" }, "_dta_index_ref_breed_name_8_306100131__K4");

                    b.ToTable("ref_breed_name", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.RefCoatName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__ref_coat__3213E83FD8DB447F");

                    b.HasIndex(new[] { "Language", "Name" }, "UQ__ref_coat__5883B7286BCA9096")
                        .IsUnique()
                        .HasFilter("[language] IS NOT NULL");

                    b.ToTable("ref_coat_name", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.RefSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id")
                        .HasName("PK__ref_spec__3213E83F7147930B");

                    b.ToTable("ref_species", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.RefSpeciesName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int")
                        .HasColumnName("species_id");

                    b.HasKey("Id")
                        .HasName("PK__ref_spec__3213E83F7D14AE9B");

                    b.HasIndex(new[] { "SpeciesId" }, "IDX_ref_species_name_species_id");

                    b.HasIndex(new[] { "SpeciesId", "Language", "Name" }, "UQ__ref_spec__37B5FEB117A830A9")
                        .IsUnique()
                        .HasFilter("[language] IS NOT NULL");

                    b.ToTable("ref_species_name", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.Title", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("PK__tmp_ms_x__72E12F1A7B485285");

                    b.ToTable("title", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("date_insert");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("date_update");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("firstname");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("language_code");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("int")
                        .HasColumnName("last_user_id");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("lastname");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3213E83F3A436660");

                    b.HasIndex(new[] { "LanguageCode" }, "IDX_user_language_code");

                    b.HasIndex(new[] { "LastUserId" }, "IDX_user_last_user_id");

                    b.HasIndex(new[] { "Login" }, "UQ__user__7838F27298A91A33")
                        .IsUnique();

                    b.ToTable("user", null, t =>
                        {
                            t.HasTrigger("tg_audit_user");

                            t.HasTrigger("tg_user_cascade_delete");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Csw.Domain.Entities.Animal", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Association", "Association")
                        .WithMany("Animals")
                        .HasForeignKey("AssociationId")
                        .HasConstraintName("FK__animal__associat__0E44098D");

                    b.HasOne("Csw.Domain.Entities.Organisation", "LastOrganisation")
                        .WithMany("Animals")
                        .HasForeignKey("LastOrganisationId")
                        .IsRequired()
                        .HasConstraintName("FK__animal__last_org__0F382DC6");

                    b.HasOne("Csw.Domain.Entities.User", "LastUser")
                        .WithMany("Animals")
                        .HasForeignKey("LastUserId")
                        .HasConstraintName("FK__animal__last_use__102C51FF");

                    b.HasOne("Csw.Domain.Entities.Owner", "Owner")
                        .WithMany("Animals")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK__animal__owner_id__3FDB6521");

                    b.Navigation("Association");

                    b.Navigation("LastOrganisation");

                    b.Navigation("LastUser");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalAction", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Animal", "Animal")
                        .WithMany("AnimalActions")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__animal_ac__anima__0B679CE2");

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalBreed", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Animal", "Animal")
                        .WithMany("AnimalBreeds")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__animal_br__anima__06A2E7C5");

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalCoat", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Animal", "Animal")
                        .WithMany("AnimalCoats")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__animal_co__anima__097F5470");

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalColor", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Animal", "Animal")
                        .WithMany("AnimalColors")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__animal_co__anima__0A7378A9");

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalFinalCertificatePrintLog", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Animal", "Animal")
                        .WithMany("AnimalFinalCertificatePrintLogs")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__animal_fi__anima__0D4FE554");

                    b.HasOne("Csw.Domain.Entities.Organisation", "Organisation")
                        .WithMany("AnimalFinalCertificatePrintLogs")
                        .HasForeignKey("OrganisationId")
                        .IsRequired()
                        .HasConstraintName("FK__animal_fi__organ__37E53D9E");

                    b.Navigation("Animal");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalOrganisationAssociation", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Animal", "Animal")
                        .WithMany("AnimalOrganisationAssociations")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__animal_or__anima__07970BFE");

                    b.HasOne("Csw.Domain.Entities.Organisation", "Organisation")
                        .WithMany("AnimalOrganisationAssociations")
                        .HasForeignKey("OrganisationId")
                        .IsRequired()
                        .HasConstraintName("FK__animal_or__organ__10CB707D");

                    b.Navigation("Animal");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Csw.Domain.Entities.AnimalOwnerLog", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Animal", "Animal")
                        .WithMany("AnimalOwnerLogs")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__animal_ow__anima__12149A71");

                    b.HasOne("Csw.Domain.Entities.User", "LastUser")
                        .WithMany("AnimalOwnerLogLastUsers")
                        .HasForeignKey("LastUserId")
                        .HasConstraintName("FK__animal_ow__last___149C0161");

                    b.HasOne("Csw.Domain.Entities.Owner", "Owner")
                        .WithMany("AnimalOwnerLogs")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__animal_ow__owner__41C3AD93");

                    b.HasOne("Csw.Domain.Entities.User", "User")
                        .WithMany("AnimalOwnerLogUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__animal_ow__user___3592E0D8");

                    b.Navigation("Animal");

                    b.Navigation("LastUser");

                    b.Navigation("Owner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Association", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Country", "CountryCodeNavigation")
                        .WithMany("Associations")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK__associati__count__1590259A");

                    b.Navigation("CountryCodeNavigation");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Identification", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Animal", "Animal")
                        .WithMany("Identifications")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__identific__anima__088B3037");

                    b.HasOne("Csw.Domain.Entities.IdentificationLocalisation", "IdentificationLocalisation")
                        .WithMany("Identifications")
                        .HasForeignKey("IdentificationLocalisationId")
                        .IsRequired()
                        .HasConstraintName("FK__identific__ident__186C9245");

                    b.HasOne("Csw.Domain.Entities.IdentificationType", "IdentificationType")
                        .WithMany("Identifications")
                        .HasForeignKey("IdentificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__identific__ident__17786E0C");

                    b.HasOne("Csw.Domain.Entities.Identifier", "Identifier")
                        .WithMany("Identifications")
                        .HasForeignKey("IdentifierId")
                        .IsRequired()
                        .HasConstraintName("FK__identific__ident__1A54DAB7");

                    b.HasOne("Csw.Domain.Entities.User", "LastUser")
                        .WithMany("Identifications")
                        .HasForeignKey("LastUserId")
                        .HasConstraintName("FK__identific__last___1B48FEF0");

                    b.Navigation("Animal");

                    b.Navigation("IdentificationLocalisation");

                    b.Navigation("IdentificationType");

                    b.Navigation("Identifier");

                    b.Navigation("LastUser");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Identifier", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Country", "Country")
                        .WithMany("Identifiers")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK__identifier__country_c__45943E77");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Organisation", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Country", "CountryCodeNavigation")
                        .WithMany("Organisations")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK__organisat__count__1E256B9B");

                    b.Navigation("CountryCodeNavigation");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Owner", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Country", "CountryCodeNavigation")
                        .WithMany("Owners")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK__owner__country_c__45943E77");

                    b.HasOne("Csw.Domain.Entities.Language", "LanguageCodeNavigation")
                        .WithMany("Owners")
                        .HasForeignKey("LanguageCode")
                        .HasConstraintName("FK__owner__language___44A01A3E");

                    b.HasOne("Csw.Domain.Entities.User", "LastUser")
                        .WithMany("OwnerLastUsers")
                        .HasForeignKey("LastUserId")
                        .HasConstraintName("FK__owner__last_user__468862B0");

                    b.HasOne("Csw.Domain.Entities.User", "User")
                        .WithMany("OwnerUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__owner__user_id__43ABF605");

                    b.Navigation("CountryCodeNavigation");

                    b.Navigation("LanguageCodeNavigation");

                    b.Navigation("LastUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Csw.Domain.Entities.OwnerAddressLog", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Country", "CountryCodeNavigation")
                        .WithMany("OwnerAddressLogs")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK__owner_add__count__2101D846");

                    b.HasOne("Csw.Domain.Entities.User", "LastUser")
                        .WithMany("OwnerAddressLogs")
                        .HasForeignKey("LastUserId")
                        .HasConstraintName("FK__owner_add__last___200DB40D");

                    b.HasOne("Csw.Domain.Entities.Owner", "Owner")
                        .WithMany("OwnerAddressLogs")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__owner_add__owner__42B7D1CC");

                    b.Navigation("CountryCodeNavigation");

                    b.Navigation("LastUser");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Passport", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Animal", "Animal")
                        .WithMany("Passports")
                        .HasForeignKey("AnimalId")
                        .IsRequired()
                        .HasConstraintName("FK__passport__animal__0C5BC11B");

                    b.HasOne("Csw.Domain.Entities.User", "LastUser")
                        .WithMany("Passports")
                        .HasForeignKey("LastUserId")
                        .HasConstraintName("FK__passport__last_u__25C68D63");

                    b.Navigation("Animal");

                    b.Navigation("LastUser");
                });

            modelBuilder.Entity("Csw.Domain.Entities.PostalCode", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Country", "CountryCodeNavigation")
                        .WithMany("PostalCodes")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK__postal_co__count__26BAB19C");

                    b.Navigation("CountryCodeNavigation");
                });

            modelBuilder.Entity("Csw.Domain.Entities.RefBreedName", b =>
                {
                    b.HasOne("Csw.Domain.Entities.RefSpecies", "Species")
                        .WithMany("RefBreedNames")
                        .HasForeignKey("SpeciesId")
                        .IsRequired()
                        .HasConstraintName("FK__ref_breed__speci__05E3CDB6");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("Csw.Domain.Entities.RefSpeciesName", b =>
                {
                    b.HasOne("Csw.Domain.Entities.RefSpecies", "Species")
                        .WithMany("RefSpeciesNames")
                        .HasForeignKey("SpeciesId")
                        .IsRequired()
                        .HasConstraintName("FK__ref_speci__speci__06D7F1EF");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("Csw.Domain.Entities.User", b =>
                {
                    b.HasOne("Csw.Domain.Entities.Language", "LanguageCodeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("LanguageCode")
                        .IsRequired()
                        .HasConstraintName("FK__user__language_c__2B7F66B9");

                    b.HasOne("Csw.Domain.Entities.User", "LastUser")
                        .WithMany("InverseLastUser")
                        .HasForeignKey("LastUserId")
                        .HasConstraintName("FK__user__last_user___2C738AF2");

                    b.Navigation("LanguageCodeNavigation");

                    b.Navigation("LastUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Csw.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Csw.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Csw.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Csw.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Csw.Domain.Entities.Animal", b =>
                {
                    b.Navigation("AnimalActions");

                    b.Navigation("AnimalBreeds");

                    b.Navigation("AnimalCoats");

                    b.Navigation("AnimalColors");

                    b.Navigation("AnimalFinalCertificatePrintLogs");

                    b.Navigation("AnimalOrganisationAssociations");

                    b.Navigation("AnimalOwnerLogs");

                    b.Navigation("Identifications");

                    b.Navigation("Passports");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Association", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Country", b =>
                {
                    b.Navigation("Associations");

                    b.Navigation("Identifiers");

                    b.Navigation("Organisations");

                    b.Navigation("OwnerAddressLogs");

                    b.Navigation("Owners");

                    b.Navigation("PostalCodes");
                });

            modelBuilder.Entity("Csw.Domain.Entities.IdentificationLocalisation", b =>
                {
                    b.Navigation("Identifications");
                });

            modelBuilder.Entity("Csw.Domain.Entities.IdentificationType", b =>
                {
                    b.Navigation("Identifications");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Identifier", b =>
                {
                    b.Navigation("Identifications");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Language", b =>
                {
                    b.Navigation("Owners");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Organisation", b =>
                {
                    b.Navigation("AnimalFinalCertificatePrintLogs");

                    b.Navigation("AnimalOrganisationAssociations");

                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Csw.Domain.Entities.Owner", b =>
                {
                    b.Navigation("AnimalOwnerLogs");

                    b.Navigation("Animals");

                    b.Navigation("OwnerAddressLogs");
                });

            modelBuilder.Entity("Csw.Domain.Entities.RefSpecies", b =>
                {
                    b.Navigation("RefBreedNames");

                    b.Navigation("RefSpeciesNames");
                });

            modelBuilder.Entity("Csw.Domain.Entities.User", b =>
                {
                    b.Navigation("AnimalOwnerLogLastUsers");

                    b.Navigation("AnimalOwnerLogUsers");

                    b.Navigation("Animals");

                    b.Navigation("Identifications");

                    b.Navigation("InverseLastUser");

                    b.Navigation("OwnerAddressLogs");

                    b.Navigation("OwnerLastUsers");

                    b.Navigation("OwnerUsers");

                    b.Navigation("Passports");
                });
#pragma warning restore 612, 618
        }
    }
}
